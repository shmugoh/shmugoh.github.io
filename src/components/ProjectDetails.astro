---
import type { AppType } from "../types";
import typeIcons from "@assets/typeIcons";
import LinkButton from "@components/LinkButton.astro";
import Hr from "@components/Hr.astro";

const projects = await Astro.glob("../content/projects/*.md");

interface ProjectParams {
  title: string;
  type: AppType;
  link: string;
  icon: string;
  img: string;
  featured: boolean; // adjust the type based on the actual type of 'featured'
}
---

<!-- component exports the following: -->
<section id="projects">
  <ul>
    {
      async () => {
        // maps all projects as an astro prop
        const project_props = projects
          .map((project): { params: ProjectParams; props: any } => ({
            params: {
              title: project.frontmatter.title,
              type: project.frontmatter.type,
              link: project.frontmatter.link,
              icon: project.frontmatter.icon,
              img: project.frontmatter.img,
              featured: project.frontmatter.featured,
            },
            props: {
              project,
            },
          }))
          .sort((a, b) => (b.params.featured ? 1 : -1)); // sorts by featured first

        // goes by each project and returns the content
        return project_props.map(({ params, props: { project } }) => {
          const { Content } = project;
          return (
            <>
              <>
                {/* header */}
                <div class="flex flex-shrink-0 items-center justify-between">
                  {/* project icon | app-type icon */}
                  {params.icon ? ( // if icon is specified, use it
                    <img
                      width="32"
                      height="32"
                      src={params.icon}
                      class="pointer-events-none"
                    />
                  ) : (
                    // if not, use the type icon instead
                    <Fragment set:html={typeIcons[params.type]} />
                  )}

                  {/* title & link to project */}
                  <h2>
                    {/* link */}
                    <LinkButton
                      className="underline decoration-dashed underline-offset-4 hover:text-skin-accent"
                      href={params.link}
                    >
                      {/* title */}
                      {params.title}
                    </LinkButton>
                  </h2>

                  {/* app-type icon */}
                  <Fragment set:html={typeIcons[params.type]} />
                </div>

                {/* image */}
                {params.img ? ( // if image is specified, use it
                  <img
                    src={params.img}
                    class="mb-8 mt-4 aspect-auto h-auto w-full rounded-lg shadow-md"
                  />
                ) : // if image is NOT specified, return null
                null}

                {/* content */}
                <Content />

                <Hr />
              </>
            </>
          );
        });
      }
    }
  </ul>
</section>

<style>
  #projects {
    @apply pb-6;
  }
  #projects h2 {
    /* @apply my-4 inline-block text-3xl font-bold sm:my-8 sm:text-5xl; */
    @apply mb-2 mt-4 text-2xl font-bold tracking-wide;
  }
  #projects :global(p) {
    @apply mb-4 leading-relaxed;
  }
  #projects :global(hr) {
    /* @apply m-8; */
  }
</style>
